@startuml CycleExploration
activate Front  #D5D5D5

' 한줄 주석
/' 여러줄 주석 '/
' 실행 -> alt + D


' CycleDataSet
Front -> CycleDataSet.API : params{ ~~~ }
activate CycleDataSet.API #B7F0B1
note left
[params]
db_name
ms_name
start time
end time
cycle
cycle times
resampling rate
nanLimit Info
end note


' CycleClustering
Front -> CycleClustering.API  : params{ ~~~ }
note left
same to CycleDataSet
end note








' ----------------- CycleDataSet -------------------
CycleDataSet.API -> dataCycleExploration.py : getCycleDataQualityCheckTable(db_client,params)

dataCycleExploration.py -> cycle_Module.py : getCycleselectDataFrame(query_data, feature_cycle, feature_cycle_times)
dataCycleExploration.py <-- cycle_Module.py : data

dataCycleExploration.py -> dataCycleExploration.py : getDatawithParam(params)
activate dataCycleExploration.py #B2EBF4
deactivate dataCycleExploration.py
note left
[return]
db_name
ms_name
feature_name
NanInfoForCleanData
feature_list
freq_min
start_time
end_time
feature_cycle
feature_cycle_times
end note

dataCycleExploration.py -> clean_data_feature.py : getOneCleanDataSetByFeature(data, NanInfoForCleanData)
dataCycleExploration.py <-- clean_data_feature.py : refinedData, NaNRemovedData, ImputedData, finalFlag

CycleDataSet.API <-- dataCycleExploration.py : cycle_info
note left
[cycle_info]
{ index1 :
    {'time_index':index_name, 'data':feature_data, 'flag':flag},
index2 : 
    {'time_index':index_name,'data':feature_data, 'flag':flag},
    .....
}
end note


Front <-- CycleDataSet.API : cycle_info
deactivate CycleDataSet.API








' ----------------- CycleClustering -------------------
CycleClustering.API -> dataCycleExploration.py : clusteringByCycle(dbModel.db_client, params, "som")
activate CycleClustering.API #B7F0B1

dataCycleExploration.py -> dataCycleExploration.py  : getDatawithParam(params)
activate dataCycleExploration.py #B2EBF4
deactivate dataCycleExploration.py


dataCycleExploration.py -> cycle_Module.py : getCycleSelectDataSet(query_data, feature_cycle, feature_cycle_times)

cycle_Module.py -> cycle_Module.py : getCycleselectDataFrame(query_data, feature_cycle, feature_cycle_times)
activate cycle_Module.py #B2EBF4
deactivate cycle_Module.py

dataCycleExploration.py <-- cycle_Module.py : dataSet
note left
[dataset]
{'index_name1':data,'index_name2':data,...}
end note



dataCycleExploration.py -> clean_data_feature.py : getMultipleCleanDataSetsByFeature(dataSet, NanInfoForCleanData)

clean_data_feature.py -> clean_data_feature.py : getOneCleanDataSetByFeature(data, NanInfoForCleanData, duration)
activate clean_data_feature.py  #B2EBF4
deactivate clean_data_feature.py 

dataCycleExploration.py <-- clean_data_feature.py : dataSet, dataSetName, NaNRemovedDataSet, imputedDatasetName, ImputedDataSet


dataCycleExploration.py -> interface.py : clusteringByMethod(feature_dataset, feature_datasetName, model)
dataCycleExploration.py <-- interface.py : result, figdata, figdata2



CycleClustering.API <-- dataCycleExploration.py : result, figdata, figdata2






Front <-- CycleClustering.API : {'data':result, 'img':figdata}
deactivate CycleClustering.API




deactivate Front
@enduml