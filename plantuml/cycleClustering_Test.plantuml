@startuml cycleClustering

' start
API -> CycleExploration.py : clusteringByCycle(json info)
CycleExploration.py -> CycleExploration.py : preprocessing
CycleExploration.py -> interface.py : clusteringByMethod(dataset, datasetName, model)
interface.py -> som_visual.py : somTrain(dataset, datasetName)



' Som Train
group basicTransform
' MinMax Scaler
som_visual.py -> basicTransform.py : scalingSmoothingDF(dataset, ewm_para=0.3)
activate basicTransform.py 
som_visual.py <-- basicTransform.py : seriesData_SS_DF
deactivate basicTransform.py 
' 
som_visual.py -> basicTransform.py : DFSetToSeries(seriesData_SS_DF)
activate basicTransform.py 
som_visual.py <-- basicTransform.py : seriesData_SS_series
deactivate basicTransform.py 
end


' minisom
group minisom
som_visual.py -> minisom.py : MiniSom(som_x, som_y,len(seriesData_SS_series[0]), sigma=0.3, learning_rate = 0.1)
activate minisom.py
som_visual.py <-- minisom.py :som
deactivate minisom.py

som_visual.py <-> minisom.py : som.random_weights_init(seriesData_SS_series)
som_visual.py <-> minisom.py : som.train(seriesData_SS_series, 50000)
som_visual.py -> minisom.py : som.win_map(seriesData_SS_series)
activate minisom.py
som_visual.py <-- minisom.py : win_map
deactivate minisom.py
end


' som_visual function
group som_visual [return=figdata1,figdata2, result]
som_visual.py -> som_visual.py : plot_som_series_center_return_image(som_x, som_y, win_map, center_type)
som_visual.py -> som_visual.py : drawSomClusteringResult(win_map, som_x, som_y, 25, 5)
som_visual.py -> som_visual.py : getsomClustNumberDict(som, seriesData_SS_series, feature_datasetName, som_y)
end



' end
interface.py <-- som_visual.py : result, figdata, figdata2
CycleExploration.py <-- interface.py : result, figdata, figdata2
API <-- CycleExploration.py : result, figdata

@enduml